{"version":3,"file":"image-cropper.component.d.ts","sources":["image-cropper.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser';\nimport { CropperPosition, Dimensions, ImageCroppedEvent, ImageTransform } from '../interfaces';\nimport { MoveTypes } from '../interfaces/move-start.interface';\nexport declare class ImageCropperComponent implements OnChanges, OnInit {\n    private sanitizer;\n    private cd;\n    private Hammer;\n    private originalImage;\n    private transformedImage;\n    private originalBase64;\n    private transformedBase64;\n    private moveStart;\n    private originalSize;\n    private transformedSize;\n    private setImageMaxSizeRetries;\n    private cropperScaledMinWidth;\n    private cropperScaledMinHeight;\n    private exifTransform;\n    private autoRotateSupported;\n    private stepSize;\n    safeImgDataUrl: SafeUrl | string;\n    safeTransformStyle: SafeStyle | string;\n    marginLeft: SafeStyle | string;\n    maxSize: Dimensions;\n    imageVisible: boolean;\n    moveTypes: typeof MoveTypes;\n    wrapper: ElementRef;\n    sourceImage: ElementRef;\n    imageChangedEvent: any;\n    imageURL: string;\n    imageBase64: string;\n    imageFile: File;\n    format: 'png' | 'jpeg' | 'bmp' | 'webp' | 'ico';\n    maintainAspectRatio: boolean;\n    transform: ImageTransform;\n    aspectRatio: number;\n    resizeToWidth: number;\n    resizeToHeight: number;\n    cropperMinWidth: number;\n    cropperMinHeight: number;\n    canvasRotation: number;\n    initialStepSize: number;\n    roundCropper: boolean;\n    onlyScaleDown: boolean;\n    imageQuality: number;\n    autoCrop: boolean;\n    backgroundColor: string;\n    containWithinAspectRatio: boolean;\n    hideResizeSquares: boolean;\n    cropper: CropperPosition;\n    alignImage: 'left' | 'center';\n    disabled: boolean;\n    imageCropped: EventEmitter<ImageCroppedEvent>;\n    startCropImage: EventEmitter<void>;\n    imageLoaded: EventEmitter<void>;\n    cropperReady: EventEmitter<Dimensions>;\n    loadImageFailed: EventEmitter<void>;\n    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    private onChangesInputImage;\n    private isValidImageChangedEvent;\n    private setCssTransform;\n    ngOnInit(): void;\n    private initCropper;\n    private loadImage;\n    private loadImageFile;\n    private isValidImageType;\n    private loadBase64Image;\n    private checkExifAndLoadBase64Image;\n    private loadImageFromURL;\n    private transformOriginalImage;\n    private transformImageBase64;\n    private getTransformedSize;\n    private setTransformedImage;\n    imageLoadedInView(): void;\n    private checkImageMaxSizeRecursively;\n    private sourceImageLoaded;\n    onResize(): void;\n    private activatePinchGesture;\n    private resizeCropperPosition;\n    resetCropperPosition(): void;\n    keyboardAccess(event: any): void;\n    private changeKeyboardStepSize;\n    private keyboardMoveCropper;\n    private getPositionForKey;\n    private getInvertedPositionForKey;\n    private getEventForKey;\n    startMove(event: any, moveType: MoveTypes, position?: string | null): void;\n    startPinch(event: any): void;\n    moveImg(event: any): void;\n    onPinch(event: any): void;\n    private setMaxSize;\n    private setCropperScaledMinSize;\n    private setCropperScaledMinWidth;\n    private setCropperScaledMinHeight;\n    private checkCropperPosition;\n    moveStop(): void;\n    pinchStop(): void;\n    private move;\n    private resize;\n    private checkAspectRatio;\n    private doAutoCrop;\n    crop(): ImageCroppedEvent | null;\n    private getImagePosition;\n    private getOffsetImagePosition;\n    private cropToBase64;\n    private getQuality;\n    private getResizeRatio;\n    private getClientX;\n    private getClientY;\n}\n"]}